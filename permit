 private fun uiViews() {
        binding.btnGrantPermission.setOnClickListener(this)
    }

    override fun onClick(v: View?) {
        when (v?.id) {

            R.id.btnGrantPermission -> {
              /*  grantStoragePermission()*/
                requestStoragePermission()
            }
        }
    }

    private fun toolbarOperations() {
        val tbBackIcn: ImageView = findViewById(R.id.backBtn)
        tbBackIcn.visibility = View.GONE

    }

    override fun onResume() {
        super.onResume()
        if (checkDiaryPermission()) {
            val intent = Intent(this, MainActivity::class.java)
            startActivity(intent)
            finish()
        }
        /*else{
            val intent = Intent(this, PermissionScreen::class.java)
            startActivity(intent)
            finish()
        }*/
    }

    private fun checkDiaryPermission(): Boolean {
        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU){
            val result =
                ContextCompat.checkSelfPermission(applicationContext, Manifest.permission.READ_MEDIA_IMAGES)
            val result1 =
                ContextCompat.checkSelfPermission(applicationContext, Manifest.permission.READ_MEDIA_VIDEO)
            val result2 =
                ContextCompat.checkSelfPermission(applicationContext, Manifest.permission.RECORD_AUDIO)
            val result3 =
                ContextCompat.checkSelfPermission(applicationContext, Manifest.permission.POST_NOTIFICATIONS)

            return  result == PackageManager.PERMISSION_GRANTED &&
                    result1 == PackageManager.PERMISSION_GRANTED &&
                    result2 == PackageManager.PERMISSION_GRANTED &&
                    result3 == PackageManager.PERMISSION_GRANTED
        } else {
            val result =
                ContextCompat.checkSelfPermission(applicationContext, Manifest.permission.READ_EXTERNAL_STORAGE)
            val result1 =
                ContextCompat.checkSelfPermission(applicationContext, Manifest.permission.WRITE_EXTERNAL_STORAGE)
            val result2 =
                ContextCompat.checkSelfPermission(applicationContext, Manifest.permission.RECORD_AUDIO)


            return  result == PackageManager.PERMISSION_GRANTED &&
                    result1 == PackageManager.PERMISSION_GRANTED &&
                    result2 == PackageManager.PERMISSION_GRANTED
        }
    }

    private fun requestStoragePermission() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            Dexter.withActivity(this)
                .withPermissions(
                    Manifest.permission.READ_MEDIA_VIDEO,
                    Manifest.permission.READ_MEDIA_IMAGES,
                    Manifest.permission.POST_NOTIFICATIONS,
                    Manifest.permission.RECORD_AUDIO
                )
                .withListener(object : MultiplePermissionsListener {
                    override fun onPermissionsChecked(report: MultiplePermissionsReport) {
                        // check if all permissions are granted
                        if (report.areAllPermissionsGranted()) {
                            /* Toast.makeText(
                                 applicationContext,
                                 "All permissions are granted!",
                                 Toast.LENGTH_SHORT
                             ).show()*/
                            val intent = Intent(this@PermissionScreen, MainActivity::class.java)
                            intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION)
                            startActivity(intent)
                            /*  AdInterstitialGoogle.getInstance()
                                  .showInterstitialAdNew(this@PermissionScreen)*/
                            finish()

                        }

                        // check for permanent denial of any permission
                        if (report.isAnyPermissionPermanentlyDenied) {
                            // show alert dialog navigating to Settings
                            openSettingsDialog()
                        }
                    }

                    override fun onPermissionRationaleShouldBeShown(
                        permissions: List<PermissionRequest>,
                        token: PermissionToken,
                    ) {
                        token.continuePermissionRequest()
                    }
                }).withErrorListener {
                    Toast.makeText(
                        applicationContext,
                        "Error occurred! ",
                        Toast.LENGTH_SHORT
                    ).show()
                }
                .onSameThread()
                .check()
        } else{
            Dexter.withActivity(this)
                .withPermissions(
                    Manifest.permission.WRITE_EXTERNAL_STORAGE,
                    Manifest.permission.RECORD_AUDIO
                )
                .withListener(object : MultiplePermissionsListener {
                    override fun onPermissionsChecked(report: MultiplePermissionsReport) {
                        // check if all permissions are granted
                        if (report.areAllPermissionsGranted()) {
                            /* Toast.makeText(
                                 applicationContext,
                                 "All permissions are granted!",
                                 Toast.LENGTH_SHORT
                             ).show()*/
                            val intent = Intent(this@PermissionScreen, MainActivity::class.java)
                            intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION)
                            startActivity(intent)
                            /*  AdInterstitialGoogle.getInstance()
                                  .showInterstitialAdNew(this@PermissionScreen)*/
                            finish()

                        }

                        // check for permanent denial of any permission
                        if (report.isAnyPermissionPermanentlyDenied) {
                            // show alert dialog navigating to Settings
                            openSettingsDialog()
                        }
                    }

                    override fun onPermissionRationaleShouldBeShown(
                        permissions: List<PermissionRequest>,
                        token: PermissionToken,
                    ) {
                        token.continuePermissionRequest()
                    }
                }).withErrorListener {
                    Toast.makeText(
                        applicationContext,
                        "Error occurred! ",
                        Toast.LENGTH_SHORT
                    ).show()
                }
                .onSameThread()
                .check()
        }

    }

    private fun openSettingsDialog() {
        val builder = AlertDialog.Builder(this, R.style.AlertDialogTheme)
        builder.setTitle("Required Permissions")
        builder.setMessage("This app need Camera and Gallery to use awesome features. Grant it in App settings.")
        builder.setPositiveButton("Take Me To SETTINGS") { dialog, which ->
            dialog.cancel()
            val intent = Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS)
            val uri: Uri = Uri.fromParts("package", packageName, null)
            intent.data = uri
            startActivityForResult(intent, 101)
        }
        builder.setNegativeButton("Cancel") { dialog, which -> dialog.cancel() }
        builder.show()
    }



}
